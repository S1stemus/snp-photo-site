openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/comments/:
    post:
      operationId: api_comments_create
      description: создает комментарии
      summary: создает комментарии
      tags:
      - Комментарии
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentShow'
          description: ''
  /api/comments/{id}/:
    get:
      operationId: api_comments_retrieve
      description: Возвращает комментарии по id
      summary: Возвращает комментарии по id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: page
        schema:
          type: integer
          default: 1
        description: Номер страницы
      - in: query
        name: per_page
        schema:
          type: integer
          default: 10
        description: Количество элементов на странице
      - in: query
        name: sort_by
        schema:
          type: string
          default: created_at
        description: Поле сортировки
      tags:
      - Комментарии
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'
          description: ''
    put:
      operationId: api_comments_update
      description: обновляет комментарии по id
      summary: обновляет комментарии по id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Комментарии
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentShow'
          description: ''
    delete:
      operationId: api_comments_destroy
      description: удаляет комментарии по id
      summary: удаляет комментарии по id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Комментарии
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/like/:
    post:
      operationId: api_like_create
      description: создает лайк
      summary: создает лайк
      tags:
      - Лайки
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikePost'
          description: ''
  /api/photo/{id}/:
    get:
      operationId: api_photo_retrieve
      description: Возвращает фотографию по id
      summary: Возвращает фотографию по id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Фотографии
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
          description: ''
    put:
      operationId: api_photo_update
      description: Обновляет фотографию по id
      summary: Обновляет фотографию по id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Фотографии
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhotoPostRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PhotoPostRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PhotoPostRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
          description: ''
    delete:
      operationId: api_photo_destroy
      description: Удаляет фотографию по id
      summary: Удаляет фотографию по id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Фотографии
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
          description: ''
  /api/photos/:
    get:
      operationId: api_photos_retrieve
      description: Возвращает все фотографии
      summary: Возвращает все фотографии
      parameters:
      - in: query
        name: page
        schema:
          type: integer
          default: 1
        description: Номер страницы
      - in: query
        name: per_page
        schema:
          type: integer
          default: 10
        description: Количество элементов на странице
      - in: query
        name: sort_direction
        schema:
          type: string
          default: desc
        description: Направление сортировки
      - in: query
        name: sort_field
        schema:
          type: string
          default: created_at
        description: Поле сортировки
      tags:
      - Фотографии
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
          description: ''
    post:
      operationId: api_photos_create
      description: Создает фотографию
      summary: Создает фотографию
      tags:
      - Фотографии
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhotoPostRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PhotoPostRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PhotoPostRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
          description: ''
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/token/verify/:
    post:
      operationId: api_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      responses:
        '200':
          description: No response body
  /api/users/{id}/:
    get:
      operationId: api_users_retrieve
      description: Возвращает пользователя по id
      summary: Возвращает пользователя по id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Пользователи
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_users_update
      description: Обновляет пользователя по id
      summary: Обновляет пользователя по id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Пользователи
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/photos/{id}/:
    get:
      operationId: api_users_photos_retrieve
      description: Возвращает все фото пользователя
      summary: Возвращает все фото пользователя
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Пользователи
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
          description: ''
  /api/users/register:
    post:
      operationId: api_users_register_create
      description: Создает пользователя
      summary: 'Создает пользователя '
      tags:
      - Пользователи
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    CommentCreateRequest:
      type: object
      properties:
        comment:
          type: string
          minLength: 1
          title: Комментарий
          maxLength: 255
        content_type:
          type: string
          minLength: 1
        object_id:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - comment
      - content_type
      - object_id
    CommentList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        comment:
          type: string
          title: Комментарий
          maxLength: 255
        user:
          $ref: '#/components/schemas/User'
        content_type:
          type: integer
        object_id:
          type: integer
          maximum: 2147483647
          minimum: 0
        comments:
          type: array
          items: {}
          readOnly: true
      required:
      - comment
      - comments
      - content_type
      - id
      - object_id
      - user
    CommentShow:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        comment:
          type: string
          title: Комментарий
          maxLength: 255
        user:
          type: integer
          title: Пользователь
        content_type:
          type: integer
        object_id:
          type: integer
          maximum: 2147483647
          minimum: 0
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - comment
      - content_type
      - created_at
      - id
      - object_id
      - updated_at
      - user
    CommentUpdateRequest:
      type: object
      properties:
        comment:
          type: string
          minLength: 1
          title: Комментарий
          maxLength: 255
      required:
      - comment
    LikePost:
      type: object
      properties:
        photo_id:
          type: integer
          title: Фото
          readOnly: true
        user_id:
          type: integer
          title: Пользователь
          readOnly: true
      required:
      - photo_id
      - user_id
    Photo:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        photo:
          type: string
          format: uri
          title: Фото
          pattern: (?:png|jpg|jpeg)$
        description:
          type: string
          title: Описание
          maxLength: 127
        user:
          type: integer
          title: Пользователь
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        state:
          allOf:
          - $ref: '#/components/schemas/StateEnum'
          title: Статус
        like_count:
          type: integer
          readOnly: true
        comment_count:
          type: integer
          readOnly: true
      required:
      - comment_count
      - created_at
      - description
      - id
      - like_count
      - photo
      - updated_at
      - user
    PhotoPostRequest:
      type: object
      properties:
        photo:
          type: string
          format: binary
          title: Фото
          pattern: (?:png|jpg|jpeg)$
        description:
          type: string
          minLength: 1
          title: Описание
          maxLength: 127
      required:
      - description
      - photo
    StateEnum:
      enum:
      - waiting
      - approved
      - rejected
      - on_delete
      type: string
      description: |-
        * `waiting` - Ожидание
        * `approved` - Одобрено
        * `rejected` - Отклонено
        * `on_delete` - Ожидает Удаления
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    TokenVerifyRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - token
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        avatar:
          type: string
          format: uri
          nullable: true
          title: Аватар
      required:
      - id
      - username
    UserRegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        avatar:
          type: string
          format: binary
          nullable: true
          title: Аватар
        password:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - password
      - username
    UserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        avatar:
          type: string
          format: binary
          nullable: true
          title: Аватар
      required:
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
